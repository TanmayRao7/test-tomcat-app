name: API Deployment

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build API
    steps:
      - uses: actions/checkout@v4

      - name: Set up maven
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
      
      - name: Build with maven
        run: mvn clean install

      - name: Rename files
        run: mv target/app-1.war target/app.war 

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: "target/app.war"
          name: artifcat-${{ github.run_id }}
  
  containerization:
    runs-on: ubuntu-latest
    needs: [build]
    name: Build & push docker image

    steps:
    - uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v5
      with:
        name: artifcat-${{ github.run_id }}
        path: target/

    - name: Login to docker hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Docker build
      uses: docker/build-push-action@v6
      with:
        context: .
        tags: tanmayrao7/test-tomcat-app:${{ github.sha }}
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        push: true
    
  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: [containerization]
    environment:
      name: dev
      url: https://dev.application.com

    steps:
      - name: Deploy To dev
        run: echo "Deployment to dev"

      - name: Create GitHub Deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'dev',
              auto_merge: false,
              required_contexts: [],
              description: 'Deploying to dev environment'
            });
            return deployment.data.id;

      - name: Update Deployment Status - In Progress
        uses: actions/github-script@v7
        id: deployment_progress_status
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'in_progress',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Deployment to dev in progress'
            });

      - name: Update Deployment Status - Success
        if: steps.deployment_progress_status.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              environment_url: 'https://dev.application.com',
              description: 'Deployment to dev successful'
            });

      - name: Update Deployment Status - Failure
        if: steps.deployment.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: 'Deployment to dev failed'
            });
            core.setFailed('ArgoCD deployment failed');


  # deploy-to-qa:
  #   runs-on: ubuntu-latest
  #   needs: [containerization]

  #   environment:
  #     name: qa
  #     url: https:/qa.application.com

  #   steps:
  #     - name: Deploy To qa
  #       run: echo "Deployment to qa"

  # deploy-to-prod:
  #   runs-on: ubuntu-latest
  #   needs: [containerization]

  #   environment:
  #     name: prod
  #     url: https:/prod.application.com

  #   steps:
  #     - name: Deploy To prod
  #       run: echo "Deployment to prod"
